// Code generated by go-bindata.
// sources:
// rules/rules.json
// DO NOT EDIT!

package petrovich

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _rulesRulesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xfd\x6e\x1a\x47\x10\xff\x9f\xa7\x40\xfc\x1d\xf7\x01\xfa\x2a\x55\x55\xa1\x72\xb6\x2c\xd9\x50\x19\xa2\xa6\xaa\x22\xd9\x26\xfe\xaa\x1d\x47\x7e\x13\x0c\xc6\x01\x8e\xc3\xaf\xb0\xfb\x46\x9d\x59\x9c\x84\xcc\x6f\x30\xbb\x81\x3d\x1f\xd7\x2a\xb2\x94\xfb\xed\xc7\xdd\x7c\xcf\xee\x8c\xfd\x77\xa5\x5a\xad\x1d\xd4\xdb\x9d\x66\xfd\x30\xa9\xfd\x5c\xe5\x67\x42\x92\x77\xbf\x27\x7f\x74\xf6\x5b\xcd\x36\x61\xbf\x38\xac\xfa\x3c\xe6\xc6\xf7\x92\x66\x23\x39\xa2\xb1\x5a\xbd\xd9\x38\x6a\xed\xfd\xd5\x6c\xbd\x6d\xd7\xde\x7c\x9b\xd0\x49\xda\x9d\x85\xa5\x0e\x33\xf7\x66\x66\x32\x7b\xb1\x30\x8f\xd1\x1e\xe1\x0f\xb6\x6b\x52\x81\xdf\x9b\xa1\x49\xcd\xc8\x9e\x0b\x7c\x60\x7a\xf6\x84\x56\x65\x02\x7f\xb0\xb7\xf6\x84\x47\xec\x31\x8e\x98\x29\xbf\x5b\xe0\x13\x93\x99\x91\x79\xa2\x7f\x43\x58\x33\x31\x33\x7b\x6c\xfa\x34\x2e\x57\xf5\xf1\xdd\xf6\x92\x76\x4f\xe9\x67\x2a\xf0\x53\x65\xe7\x27\xda\x77\x64\x3e\x6b\xfb\xd0\x57\x3a\x9a\xcd\x04\xdf\x29\xf7\xb1\x1f\x1c\x45\x5f\xa1\x5f\x17\xb8\x7f\xd8\x6a\xb4\x25\xf7\x7f\xfa\x7e\x79\xe0\xa3\xfa\x9a\x4e\x7d\x0f\x5e\xb3\xbb\x7f\xd4\xee\xfc\xf6\x67\xeb\xa8\xb1\xb0\xe6\xf9\x7f\xef\xdf\x6c\x4a\x93\xe6\x12\xed\x01\xb7\x67\x88\x9a\x07\xe2\xe9\x00\xd0\x94\x76\x98\xc0\x0e\x1f\x58\x5e\xca\x1e\xb4\x9e\x51\x7b\x4c\xa3\x72\x8c\xb5\xe7\xd4\xe9\x91\xdc\xed\x92\x25\x4c\xdf\x0a\x6b\x48\x4b\xe9\xdd\xf4\x0d\x9f\x40\xeb\xf8\x1d\x5d\xb7\xae\x97\xbf\x6c\x37\x2e\xa7\x81\xed\x92\x4d\xde\x08\xea\x8f\x49\x22\xac\xe9\x99\x1c\x71\x5c\xd1\x47\xd8\x73\x74\xc1\x2e\xd8\xa3\x0c\xe8\xe7\x01\xa4\x92\x91\x54\x2e\xe6\x52\xb1\x27\xa0\x11\x6c\xad\xbc\xee\x89\xa5\x40\x33\xa5\x8f\x99\x3a\x09\xd0\x77\xd0\x9c\x89\xf2\xf5\x7d\x78\xdf\x84\xde\xd5\x2f\x85\xcc\xd8\xe7\x8d\x41\x5f\x67\x80\x9d\x2b\xd8\x99\xc3\xbc\x79\xb0\x23\x0d\x60\xc7\xde\x4a\x40\xce\x60\xdd\x01\x48\xe1\x47\x65\xe1\x03\x6a\xed\xb7\xbb\xbb\xfb\xef\x92\x95\xd1\x6c\x37\x39\xac\x1f\x24\xab\x03\x99\x74\xcf\xd2\x5d\x48\x85\x13\xcf\x8f\xe2\xf9\xb3\x78\x1e\x4b\xe5\x92\xce\x4b\xaa\xab\x54\x7e\xe9\xa2\xa4\x0a\x4b\xf1\x4a\x47\x2a\xdd\xa2\x14\xb3\x54\x05\xf1\x7c\x21\x1d\xa1\x78\xbe\x12\xcf\xff\x88\xe7\x9b\x12\x98\x11\xa7\x0f\x33\x0a\x0c\x45\x75\x09\x7e\xaa\x3e\x8f\x54\x60\xf9\x93\x10\xb2\x76\xd0\x51\x68\x10\x85\x0a\x69\xfc\xcb\x16\xc6\x21\xd5\x91\x25\xfd\xcd\x9c\x01\x10\xa8\x33\x05\x63\xc4\x9f\x29\x1a\x71\x2a\xa6\xf0\x65\xf9\xda\x38\x9c\xf9\x14\x48\xd9\x50\xf9\x3a\x05\xa3\x84\x1d\x29\x5b\xb6\x36\x90\x32\x2f\x3f\x3e\x72\x01\x5e\x06\xb1\x6e\x51\x42\xd8\xa6\x7c\x11\x69\x76\x88\xb9\xda\x6b\xfc\x38\x69\xaa\x48\x11\x18\x6a\x30\x45\x5e\xaa\x48\x67\x27\x0a\x3f\xde\xc4\x80\xef\xea\x4a\xa3\x85\x3c\x53\x06\xd3\x98\x92\x21\x62\x42\x2c\xcb\x8c\x24\x93\x25\x80\x2e\x54\x91\xcc\x28\x2a\x45\xc0\xd2\x9e\xc2\x64\x10\x0b\x20\xd7\xb0\x6a\x08\x73\x6e\x01\xf9\x58\xd8\x78\x1b\x94\x3b\x80\x0a\x0a\x2a\xc5\xf8\x48\xf2\xee\x65\xa5\x27\x25\x29\x26\x8f\xfc\x9c\x36\xa4\x9f\xd7\x21\x1e\xa1\x80\x49\x16\xd9\x03\x1e\x28\xb5\x43\x66\x06\xfa\x7e\x17\x76\xe8\xf4\x4e\xc5\xe2\x24\x62\x41\x57\x07\xca\x11\x5b\x52\x7f\x06\xc8\x05\x20\x57\xb0\xcf\xa3\x76\x51\xb3\x96\x17\x5e\x1d\x1f\x15\xfe\x45\x8d\x2b\xb1\xe3\xfd\x26\xe8\xf1\x8a\xf7\x01\x47\xc1\xad\x48\xc5\xd6\x0b\xf7\x20\x18\x9f\x70\x1f\x45\x30\xa4\x01\xf7\x22\x2f\x5f\x79\x2e\xb0\x37\xc0\x7f\xc6\xe0\x0c\xa0\xcf\x53\x44\xe5\xd0\x28\xd4\x85\x51\xf6\x5a\x8a\xe7\x77\x78\x83\xeb\x20\xac\x3b\x8c\x43\x2a\x09\xaf\x91\x53\x7b\x51\x7a\xed\x6e\x7d\xe5\x5d\x2e\x07\x57\x46\x43\x14\xf5\x5c\xd2\xc0\x18\x78\xc1\x25\xf3\x90\x5e\x87\xc6\x51\x54\x9d\xe2\xfb\x9c\x29\xd6\x4c\x33\x16\xc5\xbd\xd2\x98\xa6\x2b\x41\xc0\x5d\x6f\xe0\x15\x3a\x6f\x22\xbf\x76\x8a\x01\x1b\x67\x51\x78\x41\x3a\xa7\x91\x62\x45\x3e\x14\x91\x07\xc8\x89\xa2\x9e\x3c\x84\x70\xf9\x47\x66\x95\xae\x20\x39\x29\x81\x63\xbd\x54\x4a\x42\x57\x88\x51\x66\x8d\x58\xe6\xb0\x00\x57\xe4\xca\xb5\xa8\xac\x43\x45\x07\xf4\xb9\xe8\x8b\x9c\x45\xc7\x89\x38\x68\xbe\xc8\xaa\xb3\x60\x16\xcc\x54\x16\xcc\x54\x16\x68\x73\x15\x16\xcc\x22\x59\x42\x18\x69\x1b\x72\xc7\xc1\x37\x58\x9e\x6e\x2a\xc0\x58\x89\xa5\x70\x20\x65\x4c\x91\x90\x3a\x4f\xcb\x12\x08\x8d\x13\x68\x46\x4a\x96\x30\x0c\xcd\x11\xcc\x58\x8b\xfe\x8c\x2a\x34\x2f\x9d\xab\xd2\x3d\x8e\x96\x2d\x94\x36\xf3\xfb\x81\xa2\x6b\xbc\x40\x04\x26\x1a\xed\x58\x26\x4f\x2e\x19\x20\xd0\xe7\x65\xbb\x30\x47\x16\xf0\xd7\x2d\xd8\x87\x16\xe8\x37\x5f\x90\x8f\x27\xdb\x9c\x92\x0c\x68\xa2\x88\x78\x22\xc5\x3c\xf1\x85\x16\x92\xca\x33\x75\xf3\xd6\xb6\x1f\xed\x93\xf4\x62\x41\xca\xb7\xbe\x61\x37\x2a\x78\x4b\x3c\x47\x15\x97\xb5\x74\xae\xea\xb6\x18\x8f\x23\xe8\x27\x7b\x67\x4f\x49\xe5\x03\xe8\xdc\xe1\x1e\x3b\xec\xa3\xfb\x3a\x80\xd4\xae\x5a\xa1\xd1\xfc\x65\x28\x12\xd9\x74\x72\xed\x73\x7f\x67\x50\xcc\x4d\x95\x28\x9a\x2a\xf1\x56\x9d\xa7\xc6\xda\x34\xd6\x3d\x53\x0e\xd7\xe8\xb9\x95\x99\x2f\x4b\xd0\xbb\x43\xfa\x36\xa0\xcc\x8f\xfb\x5f\x53\xe8\xa7\x7c\x74\x3d\xc8\xda\x48\xe6\xda\x22\x94\x11\xb6\x26\x62\xcc\xb2\x11\x3e\xe5\xa4\x41\xf7\xf5\x2b\xcb\xd9\x82\x4f\x78\xdb\xad\x9d\x03\x2a\x0b\xef\xf6\x6e\xfc\x0b\xa9\xad\xc8\x6a\xec\x9d\xbc\x09\x90\x01\xf4\xe5\xe0\x04\xd5\xda\x8f\x40\x75\x31\xb5\xd0\xcb\x90\xa0\xb0\xef\x1a\x04\x8a\x49\xd0\xff\xdd\x9f\x55\xbf\x64\xf3\xfb\xe7\x0d\x77\x7f\x2a\x1d\x24\x41\x6e\xa5\x80\x2a\x53\x00\xaf\xb8\xbe\x25\x97\xac\x12\x1b\xb9\xc1\x60\x1d\x79\xe7\x53\x7e\xf7\x54\xdd\x52\x25\x75\x2b\xa5\x99\x83\xec\x36\x41\x6e\xd9\x5a\x41\x3c\x23\xef\x76\x74\x4b\x7a\x12\x03\xde\x06\x3d\x92\xf3\x3f\xa5\xf1\x24\xdb\xd1\x85\xec\x7b\xb6\x2a\x8d\x55\x95\xa7\x25\x69\x3b\xdc\xc3\x7f\x4c\x26\xe5\x29\x0f\x02\xcf\x4a\xd3\x88\x22\x8f\x68\x74\x44\xf5\x26\xac\xb0\xb5\xa2\xd8\xc7\xf4\xed\x3b\x96\xc7\x93\x69\xce\xbf\x35\x93\x39\x57\x2f\xd8\x87\x18\xff\x2a\x73\x0e\x21\x01\x6d\x54\x6d\xb5\xa8\x7c\x79\x9a\x57\x93\x0e\xf7\x1b\x8d\x83\x24\xa7\x3f\xbb\xc1\x15\x92\xd7\xf8\x25\x89\xc5\x4f\x0b\xfd\x63\x11\x95\x85\x1d\xbc\xef\x71\xbd\x3c\xc3\x94\xd4\x42\x5e\x52\xdd\x20\xc6\xbd\x3c\x45\xb7\x1a\xcf\xbc\x28\x26\x15\x1b\xf0\xe7\x9e\x39\x77\xd0\xdf\xc4\x88\x99\x75\x7f\x33\xe5\xca\xfb\xca\xbf\x01\x00\x00\xff\xff\x21\xc2\x76\xa3\x43\x47\x00\x00")

func rulesRulesJsonBytes() ([]byte, error) {
	return bindataRead(
		_rulesRulesJson,
		"rules/rules.json",
	)
}

func rulesRulesJson() (*asset, error) {
	bytes, err := rulesRulesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/rules.json", size: 18243, mode: os.FileMode(436), modTime: time.Unix(1482166991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"rules/rules.json": rulesRulesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"rules": &bintree{nil, map[string]*bintree{
		"rules.json": &bintree{rulesRulesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

